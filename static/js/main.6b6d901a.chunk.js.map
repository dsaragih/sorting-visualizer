{"version":3,"sources":["algorithms/sortingAlgorithms.js","App.js","reportWebVitals.js","index.js"],"names":["bubbleSort","array","ctx","draw","a","i","length","j","fillStyle","fillRect","canvas","width","height","Promise","r","setTimeout","selectionSort","min","insertionSort","mergeSort","start","end","mid","Math","floor","left","slice","right","k","console","log","partition","pivotIndex","pivot","quickSort","p","algorithms","clearRect","forEach","el","Controls","props","handleChange","Form","Select","style","className","defaultValue","size","onChange","e","value","Canvas","displays","idx","canvasRef","sorting","state","useRef","useEffect","current","animationFrameId","context","getContext","render","window","requestAnimationFrame","cancelAnimationFrame","useCanvas","label","Number","Button","variant","id","onClick","ref","App","Array","keys","map","x","random","createArray","dict","c","arr","handleClick","useState","setDisplays","clone","event","target","handleMasterClick","handleReset","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b6d901a.chunk.js","sourcesContent":["export const bubbleSort = async (array, ctx, draw) => {\n    for (let i = 0; i < array.length - 1; i++) {\n\n        for (let j = 0; j < array.length - i - 1; j++) {\n            draw(ctx, array);\n            ctx.fillStyle = '#ff0000';\n            ctx.fillRect(ctx.canvas.width * j / 100, ctx.canvas.height * (100 - array[j]) / 100, ctx.canvas.width / 100, ctx.canvas.height);\n\t\t\tif (array[j] > array[j + 1]) {\n\t\t\t\t[array[j], array[j + 1]] = [array[j + 1], array[j]];\n\t\t\t}\n            await new Promise(r => setTimeout(r, 1));\n        }\n\n    }  \n    draw(ctx, array);  \n};\n\nexport const selectionSort = async (array, ctx, draw) => {\n    for (let i = 0; i < array.length; i++) {\n        let min = i;\n        for (let j = i; j < array.length; j++) {\n            draw(ctx, array);\n            ctx.fillStyle = '#ff0000';\n            ctx.fillRect(ctx.canvas.width * j / 100, ctx.canvas.height * (100 - array[j]) / 100, ctx.canvas.width / 100, ctx.canvas.height);\n\n            if (array[j] < array[min]) min = j;\n\n            await new Promise(r => setTimeout(r, 1));\n        }\n        [array[i], array[min]] = [array[min], array[i]];\n    }\n    draw(ctx, array);\n}\n\nexport const insertionSort = async (array, ctx, draw) => {\n    for (let i = 1; i < array.length; i++) {\n        if (array[i] < array[i - 1]) {\n            for (let j = i; j >= 0; j--) {\n                draw(ctx, array);\n                ctx.fillStyle = '#ff0000';\n                ctx.fillRect(ctx.canvas.width * j / 100, ctx.canvas.height * (100 - array[j]) / 100, ctx.canvas.width / 100, ctx.canvas.height);\n                if (array[j] < array[j - 1]) {\n                    [array[j - 1], array[j]] = [array[j], array[j - 1]];\n                }\n                await new Promise(r => setTimeout(r , 1))\n            }\n        }\n    }\n    draw(ctx, array);\n}\n\n\nexport const mergeSort = async(array, ctx, draw, start=0, end=100) => {\n    if (end - start > 1) {\n        const mid = Math.floor((end + start) / 2);\n        \n        mergeSort(array, ctx, draw, start, mid);\n        mergeSort(array, ctx, draw, mid, end);\n\n        const left = array.slice(start, mid);\n        const right = array.slice(mid, end);\n\n        let i = 0, j = 0, k = start;\n        while (i < left.length && j < right.length) {\n            if (left[i] < right[j]) {\n                array[k] = left[i];\n                i++;\n            } else {\n                array[k] = right[j];\n                j++;\n            }\n            //ctx.fillRect(ctx.canvas.width * k / 100, ctx.canvas.height * (100 - array[k]) / 100, ctx.canvas.width / 100, ctx.canvas.height);\n            k++;\n            //await new Promise(q => setTimeout(q , 10));\n        }\n\n        while (i < left.length) {\n            array[k] = left[i];\n            i++;\n            //ctx.fillRect(ctx.canvas.width * k / 100, ctx.canvas.height * (100 - array[k]) / 100, ctx.canvas.width / 100, ctx.canvas.height);\n            k++;\n            //await new Promise(q => setTimeout(q , 1));\n        }\n\n        while (j < right.length) {\n\t\t\tarray[k] = right[j];\n\t\t\tj++;\n            // ctx.fillRect(ctx.canvas.width * k / 100, ctx.canvas.height * (100 - array[k]) / 100, ctx.canvas.width / 100, ctx.canvas.height);\n            // await new Promise(q => setTimeout(q , 1));\n            k++;\n        }\n        draw(ctx, array);\n    } \n    console.log(array)\n}\n\nconst partition = (array, ctx, draw, start, end) => {\n    let pivotIndex = start;\n    let pivot = array[pivotIndex];\n  \n    while (start < end) {\n        while (start < array.length && array[start] <= pivot) {\n            start++;\n        }\n        while (array[end] > pivot) {\n            end--;\n        }\n        if (start < end) {\n            [array[start], array[end]] = [array[end], array[start]];\n        }\n        \n    }\n\n    [array[end], array[pivotIndex]] = [array[pivotIndex], array[end]];\n    return end;\n  }\n  \nexport const quickSort = async (array, ctx, draw, start=0, end=99) => {\n    if (start < end) {\n        let p = partition(array, ctx, draw, start, end);\n        console.log(array)\n        draw(ctx, array);\n        ctx.fillStyle = '#ff0000';\n        ctx.fillRect(ctx.canvas.width * start / 100, ctx.canvas.height * (100 - array[start]) / 100, ctx.canvas.width / 100, ctx.canvas.height);\n        ctx.fillRect(ctx.canvas.width * end / 100, ctx.canvas.height * (100 - array[end]) / 100, ctx.canvas.width / 100, ctx.canvas.height);\n        await new Promise(r => setTimeout(r, 150));\n\n        quickSort(array, ctx, draw, start, p - 1);\n        quickSort(array, ctx, draw, p + 1, end);\n    }\n    draw(ctx, array)\n}","import React, { useState, useRef, useEffect } from 'react';\nimport { bubbleSort, selectionSort, insertionSort, mergeSort, quickSort } from './algorithms/sortingAlgorithms';\nimport './App.css';\nimport { Form, Button } from 'react-bootstrap';\n\n/*\n  To do:\n  - fix animation during recursion\n*/\n\nconst algorithms = {\n  'Bubble Sort': bubbleSort,\n  'Selection Sort': selectionSort,\n  'Insertion Sort': insertionSort,\n  'Merge Sort': mergeSort,\n  'Quick Sort': quickSort\n}\n\nfunction createArray () {\n  let array = [...Array(100).keys()].map(x => x + 1);\n\n  // Durstenfeld shuffle\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n\n  return array;\n};\n\nconst draw = (ctx, array) => {\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  \n  ctx.fillStyle = '#ffffff';\n  array.forEach((el, i) => ctx.fillRect(ctx.canvas.width * i / 100, ctx.canvas.height * (100 - el) / 100, ctx.canvas.width / 100, ctx.canvas.height));\n  \n};\n\nfunction Controls (props) {\n  const {handleChange, i} = props;\n  return (\n    <Form.Select style={{width: '30%'}}className=\"dropdown\" defaultValue=\"Bubble Sort\" size=\"sm\" onChange={e => handleChange(e, i)}>\n      <option>Bubble Sort</option>\n      <option value=\"Insertion Sort\">Insertion Sort</option>\n      <option value=\"Selection Sort\">Selection Sort</option>\n      <option value=\"Merge Sort\">Merge Sort</option>\n      <option value=\"Quick Sort\">Quick Sort</option>\n    </Form.Select>\n  )\n}\n\n// Canvas code is based off of https://medium.com/@pdx.lucasm/canvas-with-react-js-32e133c05258\n\nfunction Canvas (props) {\n  const { displays, idx } = props\n\n  const canvasRef = useCanvas(displays['sorting'], displays['arr'], displays['start']);\n  const label = Number(idx) + 1;\n\n  return (\n    <div className=\"display\">\n      <div className=\"header\">\n        <span className=\"title\">{`Display ${label}`}</span>\n        <Controls handleChange={(e, i) => displays['handleChange'](e, i)} i={idx}/>\n        <Button variant=\"success\" className=\"start\" id={`toggle${(label)}`} onClick={() => displays['handleClick'](idx)} size=\"sm\">Start</Button>\n      </div>\n      <canvas ref={canvasRef}></canvas>\n    </div>\n  )\n}\n\nfunction useCanvas (sorting, array, state) {\n  \n  const canvasRef = useRef(null);\n  \n  useEffect(() => {\n    \n    const canvas = canvasRef.current;\n    canvas.style.width = '100%';\n    canvas.style.height = '100%';\n    const context = canvas.getContext('2d');\n        \n    draw(context, array);\n    let animationFrameId;\n    \n    if (state) {\n      algorithms[sorting](array, context, draw);\n      const render = () => {\n        animationFrameId = window.requestAnimationFrame(render);\n      }\n      render();\n    } \n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    }\n    \n  }, [state])\n  \n  \n  return canvasRef;\n}\n\nfunction App () {\n\n  const array = createArray();\n  \n  const dict = {};\n  for (let c = 0; c < 4; c++) {\n    dict[c] = {\n      arr: array.slice(), \n      start: false, \n      sorting: 'Bubble Sort', \n      handleClick: i => handleClick(i),\n      handleChange: (e, i) => handleChange(e, i)\n    };\n  };\n\n  const [displays, setDisplays] = useState(dict);\n    \n  const handleClick = i => {\n    let clone = {...displays};\n    clone[i]['start'] = true;\n    setDisplays(clone);\n  }\n\n  const handleMasterClick = () => {\n    let clone = {...displays};\n    for (let i = 0; i < 4; i++) {\n      clone[i]['start'] = true;\n    }\n    setDisplays(clone);\n  }\n\n  const handleChange = (event, i) => {\n    let clone = {...displays};\n    clone[i]['sorting'] = event.target.value;\n    setDisplays(clone);\n  }\n  \n  const handleReset = () => {\n    let clone = {...displays};\n    for (let i = 0; i < 4; i++) {\n      clone[i]['start'] = false;\n      clone[i]['arr'] = array.slice();\n    }\n    setDisplays(clone);\n  }\n\n  return (\n    <div id=\"container\">\n      <Canvas displays={displays[0]} idx='0'/>\n      <Canvas displays={displays[1]} idx='1'/>\n      <Canvas displays={displays[2]} idx='2'/>\n      <Canvas displays={displays[3]} idx='3'/>\n      <Button id=\"master\" size=\"lg\" variant=\"danger\" onClick={() => handleMasterClick()}>Start All</Button>\n      <Button id=\"reset\" size=\"lg\" variant=\"info\" onClick={() => handleReset()}>Reset All</Button>\n    </div>\n  )\n\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}